-- MySQL dump 10.13  Distrib 5.1.73, for redhat-linux-gnu (x86_64)
--
-- Host: 127.5.31.130    Database: blog
-- ------------------------------------------------------
-- Server version	5.5.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_info`
--

DROP TABLE IF EXISTS `t_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_info` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` smallint(6) NOT NULL COMMENT '类型',
  `title` varchar(256) DEFAULT NULL COMMENT '标题',
  `content` mediumtext COMMENT '内容',
  `pub_time` int(10) unsigned DEFAULT NULL COMMENT '发表时间',
  `author` varchar(64) DEFAULT NULL COMMENT '作者',
  `from_type` tinyint(4) DEFAULT '0' COMMENT '来源',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_info`
--

LOCK TABLES `t_info` WRITE;
/*!40000 ALTER TABLE `t_info` DISABLE KEYS */;
INSERT INTO `t_info` VALUES (5,401,'网络程序C10k问题','地址：<a href=\"http://www.kegel.com/c10k.html\" target=\"_blank\">http://www.kegel.com/c10k.html</a><br>\n[<a href=\"http://www.lwn.net/\">Help save the best Linux news source on the web -- subscribe to Linux Weekly News!</a>]\n<p>It\'s time for web servers to handle ten thousand clients simultaneously, don\'t you think? After all, the web is a big place now.</p>\n<p>And computers are big, too. You can buy a 1000MHz machine with 2 gigabytes of RAM and an 1000Mbit/sec Ethernet card for $1200 or so. Let\'s see - at 20000 clients, that\'s 50KHz, 100Kbytes, and 50Kbits/sec per client. It shouldn\'t take any more horsepower than that to take four kilobytes from the disk and send them to the network once a second for each of twenty thousand clients. (That works out to $0.08 per client, by the way. Those $100/client licensing fees some operating systems charge are starting to look a little heavy!) So hardware is no longer the bottleneck.</p>\n<p>In 1999 one of the busiest ftp sites, cdrom.com, actually handled 10000 clients simultaneously through a Gigabit Ethernet pipe. As of 2001, that same speed is now&nbsp;<a href=\"http://www.senteco.com/telecom/ethernet.htm\">being offered by several ISPs</a>, who expect it to become increasingly popular with large business customers.</p>\n<p>And the thin client model of computing appears to be coming back in style -- this time with the server out on the Internet, serving thousands of clients.</p>\n<p>With that in mind, here are a few notes on how to configure operating systems and write code to support thousands of clients. The discussion centers around Unix-like operating systems, as that\'s my personal area of interest, but Windows is also covered a bit.</p>\n<h2 style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; line-height: normal;\">Contents</h2>\n<ul style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-size: medium; line-height: normal;\">\n<li><a href=\"http://www.kegel.com/c10k.html#top\">The C10K problem</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#related\">Related Sites</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#books\">Book to Read First</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#frameworks\">I/O frameworks</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#strategies\">I/O Strategies</a><ol>\n<li><a href=\"http://www.kegel.com/c10k.html#nb\">Serve many clients with each thread, and use nonblocking I/O and&nbsp;<b>level-triggered</b>&nbsp;readiness notification</a><ul>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.select\">The traditional select()</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.poll\">The traditional poll()</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb./dev/poll\">/dev/poll</a>&nbsp;(Solaris 2.7+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.kqueue\">kqueue</a>&nbsp;(FreeBSD, NetBSD)</li>\n</ul>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.edge\">Serve many clients with each thread, and use nonblocking I/O and readiness&nbsp;<b>change</b>&nbsp;notification</a><ul>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.epoll\">epoll</a>&nbsp;(Linux 2.6+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.kevent\">Polyakov\'s kevent</a>&nbsp;(Linux 2.6+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.newni\">Drepper\'s New Network Interface</a>&nbsp;(proposal for Linux 2.6+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.sigio\">Realtime Signals</a>&nbsp;(Linux 2.4+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.sigfd\">Signal-per-fd</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#nb.kqueue\">kqueue</a>&nbsp;(FreeBSD, NetBSD)</li>\n</ul>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#aio\">Serve many clients with each thread, and use asynchronous I/O and completion notification</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#threaded\">Serve one client with each server thread</a><ul>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.linuxthreads\">LinuxThreads</a>&nbsp;(Linux 2.0+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.ngpt\">NGPT</a>&nbsp;(Linux 2.4+)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.nptl\">NPTL</a>&nbsp;(Linux 2.6, Red Hat 9)</li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.freebsd\">FreeBSD threading support</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.netbsd\">NetBSD threading support</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.solaris\">Solaris threading support</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#threads.java\">Java threading support in JDK 1.3.x and earlier</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#1:1\">Note: 1:1 threading vs. M:N threading</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#kio\">Build the server code into the kernel</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#userspace\">Bring the TCP stack into userspace</a></li>\n</ol>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#comments\">Comments</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#limits.filehandles\">Limits on open filehandles</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#limits.threads\">Limits on threads</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#java\">Java issues</a>&nbsp;[Updated 27 May 2001]</li>\n<li><a href=\"http://www.kegel.com/c10k.html#tips\">Other tips</a><ul>\n<li><a href=\"http://www.kegel.com/c10k.html#zerocopy\">Zero-Copy</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#sendfile\">The sendfile() system call can implement zero-copy networking.</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#writev\">Avoid small frames by using writev (or TCP_CORK)</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#nativethreads\">Some programs can benefit from using non-Posix threads.</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#caching\">Caching your own data can sometimes be a win.</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#limits.other\">Other limits</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#kernel\">Kernel Issues</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#benchmarking\">Measuring Server Performance</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples\">Examples</a><ul>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.nb.select\">Interesting select()-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.nb./dev/poll\">Interesting /dev/poll-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.nb.epoll\">Interesting epoll-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.nb.kqueue\">Interesting kqueue()-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.nb.sigio\">Interesting realtime signal-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.threaded\">Interesting thread-based servers</a></li>\n<li><a href=\"http://www.kegel.com/c10k.html#examples.kio\">Interesting in-kernel servers</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.kegel.com/c10k.html#links\">Other interesting links<br></a></li>\n</ul>\n<p style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-size: medium; line-height: normal;\"></p>',1429540487,'admin',0),(7,401,'零费用建站','<p>提供商： OpenShift + TK + DNSPOT</p><p>OpenShift：提供主机空间， 二级域名 不过国内屏蔽，只能访问https，速度够慢， 提供git代码提交， 免费一年<br></p><p>TK：免费一级域名，可以转发到OpenShift申请的二级域名<br></p><p>DNSPOT：dns加速，设置CNAME到二级域名，并更改TK的NS<br></p>',1429518081,'admin',0),(8,2001,'书单','<div>unix环境高级编程</div>\n<div>unix网络编程</div>\n<div>unix进程间通信</div>\n<div>tcp/ip详解卷1</div>\n<div><br></div>\n<div>高性能Mysql</div>\n<div>mysql优化</div>\n<div>Redis设计与实现</div>\n<div><br></div>\n<div>操作系统</div>\n<div>编译链接</div>\n<div>linux设计与实现</div>\n<div>shell入门与精通</div>\n<div><br></div>\n<div>c++primer</div>\n<div>stl源码剖析</div>\n<div>effective c++</div>\n<div>c++对象模型</div>\n<div>Python/php/Shell</div>\n<div><br></div>\n<div>数据结构</div>\n<div>剑指offer</div>\n<div>算法导论</div>\n<div><br></div>\n<div>分布式</div>\n<div>性能测试</div>\n<div>负载均衡</div>\n<div>大数据</div>\n<div>服务器性能</div>\n<div><br></div>\n<div>源码阅读</div>\n<div>Linux内核</div>\n<div>Redis</div>\n<div>libevent</div>\n<div>nginx</div>\n<div>memcached</div>\n<div>chrome</div>\n<div>leveldb</div>\n<div>webbench</div>\n<div>tinyhttpd</div>\n<div>cJson</div>\n<div>lua</div>\n<div>sqlite</div>\n<div>unix v6</div>\n<div>protobuf</div>',1429541383,'admin',0),(9,501,'网站性能','<p>本站刚建立，虽然每秒只能响应4-5个请求，但是对于个人博客来说已经足够，免费搭建起来的也不错哦! 增加并发量每秒可达将300.<img src=\"img/upload/38af86134b65d0f10fe33d30dd76442e.png\" style=\"width: 471.5px; height: 474.175936435868px;\"></p>',1429606530,'admin',0),(10,402,'Blog开发遇到问题','<p>备份：可以利用mysqldump把数据库定时备份，另外打包blog中的图片资源;</p><p>发布：由于Openshift利用git来管理，所以，每次需要从远程把数据库，图片等scp到本地，然后再初始化本地数据，最后复制到本地的远程clone，最后git push到master上;</p><p>mysql访问地址不对，需要echo出mysql host ($OPENSHIFT_MYSQL_DB_HOST) &amp; port;&nbsp;</p><p>dnspod：需要用国际版，国内的访问不行;</p><p><br></p><p><br></p>',1429588065,'admin',0),(11,403,'一种缓存区设计方案','<div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">网络或者应用缓程中，经常需要把数据缓存到一个缓存区中，用的时候再从中取出来，以下介绍是类似于libevent中的缓存区实现，&nbsp;</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">class ByteBuffer {</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">&nbsp; &nbsp; &nbsp;char * m_buff; //缓存区地址</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">&nbsp; &nbsp; &nbsp;int &nbsp; &nbsp; &nbsp;m_size; &nbsp;//长度</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">&nbsp; &nbsp; &nbsp;int &nbsp; &nbsp; &nbsp;m_head; //可读地址偏移</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">&nbsp; &nbsp; &nbsp;int &nbsp; &nbsp; &nbsp;m_tail; &nbsp; &nbsp;//可写地址偏移</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">}</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">写入len长度到缓存区：判断m_size-m_tail是否大于len,如果大于，则写入，m_tail += len; 否则reserver m_buff大小， 可以调用realloc</span></div><div style=\"orphans: 2; widows: 2; \"><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; font-size: medium; line-height: normal;\">读缓存区：首先判断m_tail - m_head是否小于m_head,如果是， 则平移数据到头部，即m_head=0, m_tail = len；否则读取数据，m_head+=len</span></div><div style=\"orphans: 2; widows: 2;\"><br></div>',1429615688,'admin',0),(12,101,'C++模板全特化与偏特化','<p>模板为什么要特化，因为编译器认为，对于特定的类型，如果你能对某一功能更好的实现，那么就该听你的。</p>\n<p>模板分为类模板与函数模板，特化分为全特化与偏特化。全特化就是限定死模板实现的具体类型，偏特化就是如果这个模板有多个类型，那么只限定其中的一部分。</p>\n<p>先看类模板：</p>\n<p>template&lt;typename T1, typename T2&gt;&nbsp;</p>\n<p>class Test</p>\n<p>{</p>\n<p>&nbsp; &nbsp; public:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Test(T1 i,T2 j):a(i),b(j){cout&lt;&lt;\"模板类\"&lt;&lt;endl;}</p>\n<p>&nbsp; &nbsp; private:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; T1 a;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; T2 b;</p>\n<p>};</p>\n<p>template&lt;&gt;</p>\n<p>class Test&lt;int , char&gt;</p>\n<p>{</p>\n<p>&nbsp; &nbsp; public:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Test(int i, char j):a(i),b(j){cout&lt;&lt;\"全特化\"&lt;&lt;endl;}</p>\n<p>&nbsp; &nbsp; private:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; int a;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; char b;</p>\n<p>};</p>\n<p>template &lt;typename T2&gt;&nbsp;</p>\n<p>class Test&lt;char, T2&gt;&nbsp;</p>\n<p>{</p>\n<p>&nbsp; &nbsp; public:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Test(char i, T2 j):a(i),b(j){cout&lt;&lt;\"偏特化\"&lt;&lt;endl;}</p>\n<p>&nbsp; &nbsp; private:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; char a;</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; T2 b;</p>\n<p>};&nbsp;</p>\n<p>而对于函数模板，却只有全特化，不能偏特化：<br></p>\n<p></p>\n<p>那么下面3句依次调用类模板、全特化与偏特化：</p>\n<p><span class=\"Apple-tab-span\" style=\"white-space: pre;\">	</span>Test&lt;double , double&gt; t1(0.1,0.2);</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Test&lt;int , char&gt; t2(1,\'A\');<br></p>\n<p></p>\n<p></p>\n<p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>Test&lt;char, bool&gt; t3(\'A\',true);</p>\n<p></p>\n<p></p>\n<p></p>\n<p>//模板函数</p>\n<p>template&lt;typename T1, typename T2&gt;</p>\n<p>void fun(T1 a , T2 b)</p>\n<p>{</p>\n<p>cout&lt;&lt;\"模板函数\"&lt;&lt;endl;</p>\n<p>}</p>\n<p>//全特化<br></p>\n<p>template&lt;&gt;</p>\n<p>void fun&lt;int ,char &gt;(int a, char b)</p>\n<p>{</p>\n<p><span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>cout&lt;&lt;\"全特化\"&lt;&lt;endl;</p>\n<p>}</p>\n<p>//函数不存在偏特化：下面的代码是错误的<br></p>\n<p>/*template&lt;typename T2&gt;</p>\n<p>void fun&lt;char,T2&gt;(char a, T2 b)</p>\n<p>{</p>\n<p>cout&lt;&lt;\"偏特化\"&lt;&lt;endl;</p>\n<p>}*/</p>\n<p>至于为什么函数不能偏特化，似乎不是因为语言实现不了，而是因为偏特化的功能可以通过函数的重载完成。</p>\n<p><a href=\"http://blog.csdn.net/thefutureisour/article/details/7964682/\" target=\"_blank\">http://blog.csdn.net/thefutureisour/article/details/7964682/</a><span style=\"font-family: Arial; line-height: 26px;\"><br></span></p>',1429689324,'admin',1),(13,501,'Redis性能测试','<span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">个人感觉redis有太多的好处，节省了大家开发的时间，提供的基本类型大致满足了开发需求，&nbsp;</span><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">虽然其也有一些坑，但我想总是能避免的&nbsp;</div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\"><div>测试环境：Intel(R) Xeon(R) CPU &nbsp; &nbsp;E5504&nbsp; @ 2.00GHz 8核 8G</div><div>单进程一个连接:</div></div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">官方的测试能跑出每秒近10w的成绩，当然并发量为50个</div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">但自己的只能跑出每秒近1w的成绩，估计是由于自己是单个进程单并发吧</div><pre style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">#!/usr/bin/python\n<pre>#encoding: utf-8\nimport sys<br>import struct<br>import time<br>import redis<br>import random\ncount = 1000000;<br>def test_hset_init(r, tmpstr):<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; total = 0;<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.hset(\"blade\", i, tmpstr);<br>&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"hset init 总计时间为:%u us, 平均时间为:%u us\" % (total, total / (count*1.0))&nbsp;\n&nbsp;&nbsp;&nbsp; pass\ndef test_hset_op(r, tmpstr):<br>&nbsp;&nbsp;&nbsp; total = 0<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val = r.hget(\"blade\", i);<br>&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"获取hget总计时间为:%u us, 平均时间为:%u us\" % (total, total /&nbsp; (count*1.0))\n&nbsp;&nbsp;&nbsp; total = 0<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val = r.hset(\"blade\", i, tmpstr);<br>&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"更新hset总计时间为:%u us, 平均时间为:%u us\" % (total, total / (count*1.0))&nbsp;<br>\n&nbsp;&nbsp;&nbsp; pass\ndef test_zset_init(r):<br>&nbsp;&nbsp;&nbsp; total = 0;<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.zadd(\"ranking\",&nbsp; 10000000000 + i, i);<br>&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"zadd 总计时间为:%u us, 平均时间为:%u us\" % (total, total /&nbsp; (count*1.0))\n&nbsp;&nbsp;&nbsp; pass\ndef test_zset_op(r):<br>&nbsp;&nbsp;&nbsp; total = 0;<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rank = r.zrevrank(\"ranking\", 10000000000 + i);<br>&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"zrevrank 总计时间为:%u us, 平均时间为:%u us\" % (total, total /&nbsp; (count*1.0))\n&nbsp;&nbsp;&nbsp; total = 0;<br>&nbsp;&nbsp;&nbsp; cur = time.time() * 1000000;<br>&nbsp;&nbsp;&nbsp; for i in range(0, count):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.zincrby(\"ranking\", 10000000000 + i, i);\n&nbsp;&nbsp;&nbsp; last = time.time() * 1000000;<br>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print \"第%u个使用%uus\" % (i, (last-cur))<br>&nbsp;&nbsp;&nbsp; total += (last - cur)\n&nbsp;&nbsp;&nbsp; print \"zincrby 总计时间为:%u us, 平均时间为:%u us\" % (total, total /&nbsp; (count*1.0))\n&nbsp;&nbsp;&nbsp; pass\ndef main():<br>&nbsp;&nbsp;&nbsp; r = redis.StrictRedis(host=\'localhost\', port=6379, db=0)<br>&nbsp;&nbsp;&nbsp; r.flushall();\n&nbsp;&nbsp;&nbsp; tmpstr = \"\";<br>&nbsp;&nbsp;&nbsp; for i in range(0, 300):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmpstr += str(random.randint(0,9));\n&nbsp;&nbsp;&nbsp; print \"插入的字符串:\", tmpstr, \"长度为:\", len(tmpstr), \"byte\";\n&nbsp;&nbsp;&nbsp; #init hset data 100000 300B<br>&nbsp;&nbsp;&nbsp; print \"hset key为blade 插入数据为%lu个，每长度为300B\" % count<br>&nbsp;&nbsp;&nbsp; test_hset_init(r, tmpstr);\n&nbsp;&nbsp;&nbsp; #test hget hset 10000次 求每次时间<br>&nbsp;&nbsp;&nbsp; print \"hset key为blade 获取和更新 %lu条数据\" % count<br>&nbsp;&nbsp;&nbsp; test_hset_op(r, tmpstr);&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp; #init zset data 100000条<br>&nbsp;&nbsp;&nbsp; test_zset_init(r);<br>&nbsp;&nbsp;&nbsp; #test zadd arank 10000次 求每次时间 并求平均时间<br>&nbsp;&nbsp;&nbsp; test_zset_op(r);\n&nbsp;&nbsp;&nbsp; pass\nif __name__ == \'__main__\':<br>&nbsp;&nbsp;&nbsp; main()</pre></pre>',1429696413,'admin',0),(14,501,'Protobuf性能测试','<div><span style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">protobuf是google出的一种消息序列化组件，无论从性能还是可用性上都非常良好。</span><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">测试环境：Intel(R) Xeon(R) CPU &nbsp; &nbsp;E5504&nbsp; @ 2.00GHz 8核 8G</div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">序列化大小为420字节结果为：</div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">序列化执行100000次总花费时间: 1603055usec;平均每次花费: 1.60305usec<br>\n反序列化执行100000次总花费时间: 1197281usec;平均每次花费: 1.19728usec</div><div style=\"color: rgb(0, 0, 0); font-family: 微软雅黑; line-height: normal; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;\">可见其性能非常好，压缩性和可扩展性都比自己写的结构体序列化要好。</div></div>',1429696454,'admin',0),(15,201,'带有详细注释的 Redis 3.0 代码','<p><span style=\"float: left;\">原文</span>&nbsp;&nbsp;<a class=\"cut cut70\" href=\"http://github.com/huangz1990/redis-3.0-annotated?utm_source=tuicool\">http://github.com/huangz1990/redis-3.0-annotated<br></a>Redis 3.0 源码注释<br>附录：各个源码文件的作用简介</p>\n<table class=\"table table-bordered\" style=\"border-collapse: separate; width: 603px; margin-bottom: 1.5em; border-left-width: 0px; border-radius: 4px;\">\n<thead valign=\"bottom\"><tr>\n<th style=\"border-top-left-radius: 4px;\">文件</th>\n<th style=\"border-top-right-radius: 4px;\">作用</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr>\n<td>adlist.c&nbsp;、&nbsp;adlist.h</td>\n<td>双端链表数据结构 的实现。</td>\n</tr>\n<tr>\n<td>ae.c&nbsp;、&nbsp;ae.h&nbsp;、&nbsp;ae_epoll.c&nbsp;、&nbsp;ae_evport.c&nbsp;、&nbsp;ae_kqueue.c&nbsp;、&nbsp;ae_select.c</td>\n<td>事件处理器，以及各个具体实现。</td>\n</tr>\n<tr>\n<td>anet.c&nbsp;、&nbsp;anet.h</td>\n<td>Redis 的异步网络框架，内容主要为对 socket 库的包装。</td>\n</tr>\n<tr>\n<td>aof.c</td>\n<td>AOF 功能的实现。</td>\n</tr>\n<tr>\n<td>asciilogo.h</td>\n<td>保存了 Redis 的 ASCII LOGO 。</td>\n</tr>\n<tr>\n<td>bio.c&nbsp;、&nbsp;bio.h</td>\n<td>Redis 的后台 I/O 程序，用于将 I/O 操作放到子线程里面执行， 减少 I/O 操作对主线程的阻塞。</td>\n</tr>\n<tr>\n<td>bitops.c</td>\n<td>二进制位操作命令的实现文件。</td>\n</tr>\n<tr>\n<td>blocked.c</td>\n<td>用于实现 BLPOP 命令和 WAIT 命令的阻塞效果。</td>\n</tr>\n<tr>\n<td>cluster.c&nbsp;、&nbsp;cluster.h</td>\n<td>Redis 的集群实现。</td>\n</tr>\n<tr>\n<td>config.c&nbsp;、&nbsp;config.h</td>\n<td>Redis 的配置管理实现，负责读取并分析配置文件， 然后根据这些配置修改 Redis 服务器的各个选项。</td>\n</tr>\n<tr>\n<td>crc16.c&nbsp;、&nbsp;crc64.c&nbsp;、&nbsp;crc64.h</td>\n<td>计算 CRC 校验和。</td>\n</tr>\n<tr>\n<td>db.c</td>\n<td>数据库实现。</td>\n</tr>\n<tr>\n<td>debug.c</td>\n<td>调试实现。</td>\n</tr>\n<tr>\n<td>dict.c&nbsp;、&nbsp;dict.h</td>\n<td>字典数据结构的实现。</td>\n</tr>\n<tr>\n<td>endianconv.c&nbsp;、&nbsp;endianconv.h</td>\n<td>二进制的大端、小端转换函数。</td>\n</tr>\n<tr>\n<td>fmacros.h</td>\n<td>一些移植性方面的宏。</td>\n</tr>\n<tr>\n<td>help.h</td>\n<td>utils/generate-command-help.rb&nbsp;程序自动生成的命令帮助信息。</td>\n</tr>\n<tr>\n<td>hyperloglog.c</td>\n<td>HyperLogLog 数据结构的实现。</td>\n</tr>\n<tr>\n<td>intset.c&nbsp;、&nbsp;intset.h</td>\n<td>整数集合数据结构的实现，用于优化 SET 类型。</td>\n</tr>\n<tr>\n<td>lzf_c.c&nbsp;、&nbsp;lzf_d.c&nbsp;、&nbsp;lzf.h&nbsp;、&nbsp;lzfP.h</td>\n<td>Redis 对字符串和 RDB 文件进行压缩时使用的 LZF 压缩算法的实现。</td>\n</tr>\n<tr>\n<td>Makefile&nbsp;、&nbsp;Makefile.dep</td>\n<td>构建文件。</td>\n</tr>\n<tr>\n<td>memtest.c</td>\n<td>内存测试。</td>\n</tr>\n<tr>\n<td>mkreleasehdr.sh</td>\n<td>用于生成释出信息的脚本。</td>\n</tr>\n<tr>\n<td>multi.c</td>\n<td>Redis 的事务实现。</td>\n</tr>\n<tr>\n<td>networking.c</td>\n<td>Redis 的客户端网络操作库， 用于实现命令请求接收、发送命令回复等工作， 文件中的函数大多为 write 、 read 、 close 等函数的包装， 以及各种协议的分析和构建函数。</td>\n</tr>\n<tr>\n<td>notify.c</td>\n<td>Redis 的数据库通知实现。</td>\n</tr>\n<tr>\n<td>object.c</td>\n<td>Redis 的对象系统实现。</td>\n</tr>\n<tr>\n<td>pqsort.c&nbsp;、&nbsp;pqsort.h</td>\n<td>快速排序（QuickSort）算法的实现。</td>\n</tr>\n<tr>\n<td>pubsub.c</td>\n<td>发布与订阅功能的实现。</td>\n</tr>\n<tr>\n<td>rand.c&nbsp;、&nbsp;rand.h</td>\n<td>伪随机数生成器。</td>\n</tr>\n<tr>\n<td>rdb.c&nbsp;、&nbsp;rdb.h</td>\n<td>RDB 持久化功能的实现。</td>\n</tr>\n<tr>\n<td>redisassert.h</td>\n<td>Redis 自建的断言系统。</td>\n</tr>\n<tr>\n<td>redis-benchmark.c</td>\n<td>Redis 的性能测试程序。</td>\n</tr>\n<tr>\n<td>redis.c</td>\n<td>负责服务器的启动、维护和关闭等事项。</td>\n</tr>\n<tr>\n<td>redis-check-aof.c&nbsp;、&nbsp;redis-check-dump.c</td>\n<td>RDB 文件和 AOF 文件的合法性检查程序。</td>\n</tr>\n<tr>\n<td>redis-cli.c</td>\n<td>Redis 客户端的实现。</td>\n</tr>\n<tr>\n<td>redis.h</td>\n<td>Redis 的主要头文件，记录了 Redis 中的大部分数据结构， 包括服务器状态和客户端状态。</td>\n</tr>\n<tr>\n<td>redis-trib.rb</td>\n<td>Redis 集群的管理程序。</td>\n</tr>\n<tr>\n<td>release.c&nbsp;、&nbsp;release.h</td>\n<td>记录和生成 Redis 的释出版本信息。</td>\n</tr>\n<tr>\n<td>replication.c</td>\n<td>复制功能的实现。</td>\n</tr>\n<tr>\n<td>rio.c&nbsp;、&nbsp;rio.h</td>\n<td>Redis 对文件 I/O 函数的包装， 在普通 I/O 函数的基础上增加了显式缓存、以及计算校验和等功能。</td>\n</tr>\n<tr>\n<td>scripting.c</td>\n<td>脚本功能的实现。</td>\n</tr>\n<tr>\n<td>sds.c&nbsp;、&nbsp;sds.h</td>\n<td>SDS 数据结构的实现，SDS 为 Redis 的默认字符串表示。</td>\n</tr>\n<tr>\n<td>sentinel.c</td>\n<td>Redis Sentinel 的实现。</td>\n</tr>\n<tr>\n<td>setproctitle.c</td>\n<td>进程环境设置函数。</td>\n</tr>\n<tr>\n<td>sha1.c&nbsp;、&nbsp;sha1.h</td>\n<td>SHA1 校验和计算函数。</td>\n</tr>\n<tr>\n<td>slowlog.c&nbsp;、&nbsp;slowlog.h</td>\n<td>满查询功能的实现。</td>\n</tr>\n<tr>\n<td>solarisfixes.h</td>\n<td>针对 Solaris 系统的补丁。</td>\n</tr>\n<tr>\n<td>sort.c</td>\n<td>SORT 命令的实现。</td>\n</tr>\n<tr>\n<td>syncio.c</td>\n<td>同步 I/O 操作。</td>\n</tr>\n<tr>\n<td>testhelp.h</td>\n<td>测试辅助宏。</td>\n</tr>\n<tr>\n<td>t_hash.c&nbsp;、&nbsp;t_list.c&nbsp;、t_set.c&nbsp;、&nbsp;t_string.c&nbsp;、t_zset.c</td>\n<td>定义了 Redis 的各种数据类型，以及这些数据类型的命令。</td>\n</tr>\n<tr>\n<td>util.c&nbsp;、&nbsp;util.h</td>\n<td>各种辅助函数。</td>\n</tr>\n<tr>\n<td>valgrind.sup</td>\n<td>LZF 压缩算法的相关文件。</td>\n</tr>\n<tr>\n<td>version.h</td>\n<td>记录了 Redis 的版本号。</td>\n</tr>\n<tr>\n<td>ziplist.c&nbsp;、&nbsp;ziplist.h</td>\n<td>ZIPLIST 数据结构的实现，用于优化 LIST 类型。</td>\n</tr>\n<tr>\n<td>zipmap.c&nbsp;、&nbsp;zipmap.h</td>\n<td>ZIPMAP 数据结构的实现，在 Redis 2.6 以前用与优化 HASH 类型， Redis 2.6 开始已经废弃。</td>\n</tr>\n<tr>\n<td style=\"border-bottom-left-radius: 4px;\">zmalloc.c&nbsp;、&nbsp;zmalloc.h</td>\n<td style=\"border-bottom-right-radius: 4px;\">内存管理程序。</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<p></p>\n<p style=\"margin-bottom: 0.75em;\">本项目是注释版的 Redis 3.0 源码， 原始代码来自：&nbsp;<a href=\"https://github.com/antirez/redis\" rel=\"nofollow,noindex\" style=\"transition: 0.25s; -webkit-transition: 0.25s; border-bottom-width: 1px; border-bottom-style: dashed; border-bottom-color: rgb(148, 148, 148);\">https://github.com/antirez/redis</a>&nbsp;。</p>\n<p style=\"margin-bottom: 0.75em;\">这份注释是我在创作新版《Redis 设计与实现》期间， 为了了解 Redis 的内部实现而制作的， 所有在书中有介绍的内容， 在源码中都进行了相应的注释。</p>\n<p style=\"margin-bottom: 0.75em;\">在注释的过程中， 除了少量空格和空行方面的调整外， 没有对原始代码进行任何其他改动， 最大程度地保证了代码的“原汁原味”。</p>\n<p style=\"margin-bottom: 0.75em;\">希望这份注释源码能给大家学习和了解 Redis 带来一点帮助。</p>\n<p style=\"margin-bottom: 0.75em;\">另外，&nbsp;<a href=\"http://redisbook.com/\" rel=\"nofollow,noindex\" style=\"transition: 0.25s; -webkit-transition: 0.25s; border-bottom-width: 1px; border-bottom-style: dashed; border-bottom-color: rgb(148, 148, 148);\">新版《Redis 设计与实现》</a>&nbsp;正在各大网店发售中，&nbsp;<a href=\"http://www.chinahadoop.cn/course/53\" rel=\"nofollow,noindex\" style=\"transition: 0.25s; -webkit-transition: 0.25s; border-bottom-width: 1px; border-bottom-style: dashed; border-bottom-color: rgb(148, 148, 148);\">《Redis 从入门到精通》课程</a>&nbsp;也正在接受报名， 如果这两个项目能获得大家的支持的话， 我将不胜感激。</p>\n<p style=\"margin-bottom: 0.75em;\">Have fun!</p>\n<div><p style=\"margin-bottom: 0.75em;\">黄健宏（huangz）</p>\n<p style=\"margin-bottom: 0.75em;\">2014 年 6 月 28 日</p>\n</div>\n<p><br></p>',1429756575,'admin',0);
/*!40000 ALTER TABLE `t_info` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-04-22 22:37:37
